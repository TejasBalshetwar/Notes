####Overview :
1) What is docker image and container?
2) Difference between image and container
3) VM vs docker 
4) Some basic docker commands
5) Create a docker image
6) Run it as a container
7) Docker-compose
8) Docker Volumes


###What is docker image and container?
Docker image is a read only template with instructions to create a docker container. Docker container is a running instance of docker image.
Docker image:
It is a file which has many layers
Each layer is a set of instructions
Each layer is read only
The bottom-most layer is of base image (windows / linux/ mac image)
The top-most layer is of application image
The other layers contain other dependencies required like installing python.

Docker container:
It is a running instance of docker image
It is a process which runs on host operating system
It is isolated from the host and other containers
It has its own file system, its own networking, its own process space
It can be stopped, started, moved, or deleted
65000 ports are available inside a docker container

###Difference between image and container
1) Docker image is a package/artifact.
2) We can move or share this artifact.
3) Docker container is a running instance of docker image.
4) We cannot move or share this running instance.
5) When a docker container is created it creates and isolated environment 

###VM vs docker
1) VM is a full fledged operating system.
2) Docker does not have its own OS kernel. It uses the host OS.
3) VM is a heavy weight process.
4) Docker is a light weight process.

VM comes with its own OS kernel which interacts with the Hardware. That's the reason why we need to allocate RAM and Memory for VM but its not required in case of Docker.
Docker image is small in size
VM is very huge size.
Docker is faster than VM.

VM can be installed on any OS. But docker faces compatibility issues when containers are used in different operating systems (only 1 disadvantage).

###Some Basic docker commands
1) docker version
2) docker info
3) docker images - to see all the images
4) docker ps - to see all the running containers 
5) docker ps -a : to see all the containers
6) docker pull repo-name: to download a public docker image
7) docker run -d -p 100:80 docker/getting-started: -d stands for detached mode(background) -p stands for port number where 100 is port number of host port and 80 is port of container.
8) docker stop container-id : to stop a container
9) docker start container-id : to start a container
10) docker rm container-id : to remove a container
11) docker rmi image-id : to remove an image    

###Create a docker image
1) Create a docker file - "Dockerfile"
2) Most important things for Dockerfile:
    1) FROM : base image and other images we want in our image
    2) COPY : copy contents of local directory to path specified that we want in our image (. is to copy all files)
    3) WORKDIR : change working directory
    4) RUN : to run  particular command
    5) CMD : provide args that run inside the cmd in the image
3) To create an image:
    1) docker build -t image-name:tag .
    2) docker build -t image-name:tag -f Dockerfile .
    -t stands tags 
    . is for current dir
4) To run an image:
docker run -d -p your_port:container_port --name <name_for_container> <name_of_image>
-d : to run in background 
-p : for specifying port information
--name : to give name to container



###Docker-compose
It is used to create an application using multiple containers.
1) docker-compose.yml
2) docker-compose up
3) docker-compose down
4) docker-compose up -d
5) docker-compose down -v
docker-compose exec db psql --username=postgres --dbname=postgres : check if database is created
docker-compose exec web python main.py migrate : to run migrations

docker exec -it <container-id> bash
Above command is used to open bash terminal of a container

###Docker Volumes
Docker volumes are used to store data outside the container.
Docker volumes are created in the host machine.
Docker volumes are the preferred mechanism for persisting data generated by and used by Docker containers.
Docker volumes are stored in a part of the host filesystem which is managed by Docker (/var/lib/docker/volumes/ on Linux).
Data remains when container is off.
1) docker volume create my-vol
2) docker volume ls
3) docker volume inspect my-vol
4) docker volume rm my-vol

Docker volumes can be used store on remote hosts, cloud providers.
Also provides encryption and security.

There are three types of volumes:
1) Host Volumes
2) Anonymous Volumes
3) Named Volumes

##Host Volumes
Host volumes are directories on the host machine that are mounted into the container.
Host volumes are not managed by Docker.
Host volumes are not automatically removed when the container is removed.
Host volumes are not automatically removed when the Docker daemon restarts.
Host volumes are not automatically removed when the host machine is restarted,container is stopped, or container is deleted or is updated.
Host volumes are not automatically removed when the image is deleted.
To create host volume:
docker run -d -p 100:80 -v /path/on/host:/path/on/container image
-v is for volume

##Anonymous Volumes
Anonymous volumes are automatically created and managed by Docker when you mount a volume into a container.
Anonymous volumes are stored in a special location on the host machine that is managed by Docker (/var/lib/docker/volumes/ on Linux).
Anonymous volumes are removed when the container is removed.
Anonymous volumes are removed when the Docker daemon restarts.
Anonymous volumes are removed when the host machine is restarted, container is stopped, or container is deleted or is updated.
Anonymous volumes are not removed when the image is deleted.
To create anonymous volume:
docker run -d -p 100:80 -v /path/on/container image

##Named Volumes
Named volumes are created and managed by Docker.
Named volumes are stored in a special location on the host machine that is managed by Docker (/var/lib/docker/volumes/ on Linux).
Named volumes are removed when the container is removed.
Named volumes are removed when the Docker daemon restarts.
Named volumes are removed when the host machine is restarted, container is stopped, or container is deleted or is updated.
Named volumes are not removed when the image is deleted.
To create named volume:
docker run -d -p 100:80 -v name:/path/on/container image
The only difference between named volume and Anonymous volume is that we name the volume.

##Bind Mounts
Bind mounts are directories on the host machine that are mounted into the container.
Bind mounts are not managed by Docker.

##Docker Volume vs Bind Mount
1) Docker volumes are managed by Docker.
2) Bind mounts are not managed by Docker.
3) Docker volumes are stored in a part of the host filesystem which is managed by Docker (/var/lib/docker/volumes/ on Linux).
4) Bind mounts may be stored anywhere on the host system.
5) Docker volumes can be more safely shared among multiple containers.
6) Bind mounts may not be shared among multiple containers.
7) Docker volumes are easier to back up or migrate than bind mounts.
8) Bind mounts are easier to use than Docker volumes.
9) Docker volumes have better performance than bind mounts on Linux hosts.
10) Bind mounts have better performance than Docker volumes on Windows hosts.


###Docker networking
Docker networking is a feature that allows you to create a network of containers and connect them to each other.
Docker networking does not require any configuration.
Docker networking is enabled by default.
Docker networking is based on the Linux kernel's networking features.
Docker networking can be used to connect containers to each other and to the outside world.
